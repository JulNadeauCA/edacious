# Public domain

PACKAGE("Edacious")
VERSION("1.0-beta")
RELEASE("Sepulchral and Frog-like")

REGISTER("--enable-debug",		"General debugging [default: no]")
REGISTER("--enable-fpdebug",		"Debug FP exceptions [default: no]")
REGISTER("--enable-exprdebug",		"Debug expression parsing [default: no]")
REGISTER("--enable-warnings",		"Enable compiler warnings [default: no]")
REGISTER("--enable-edition",		"Enable graphical editor [default: yes]")
REGISTER("--enable-threads",		"Enable multithreading [default: auto]")
REGISTER("--with-pthreads[=PREFIX]",	"Specify libpthreads location [default: auto]")
REGISTER("--with-agar[=PREFIX]", 	"Specify Agar location [default: auto]")

HDEFINE(EDACIOUS_VERSION, "$VERSION")

MDEFINE(SHAREDIR, "$PREFIX/share/edacious")
HDEFINE(SHAREDIR, "$PREFIX/share/edacious")
MDEFINE(LIBDIR, "$PREFIX/lib")
HDEFINE(LIBDIR, "$PREFIX/lib")
MDEFINE(MODULEDIR, "$PREFIX/lib/edacious")
HDEFINE(MODULEDIR, "$PREFIX/lib/edacious")
MDEFINE(INCLDIR, "$PREFIX/include/edacious")
HDEFINE(INCLDIR, "$PREFIX/include/edacious")

REQUIRE(cc)
CHECK(sys_types)
CHECK(getopt)
CHECK(getpwuid)
CHECK(getuid)

# Require Agar
REQUIRE(agar, 1.4.0, ${prefix_agar})
REQUIRE(agar-vg, 1.4.0, ${prefix_agar})
REQUIRE(agar-dev, 1.4.0, ${prefix_agar})
REQUIRE(agar-math, 1.4.0, ${prefix_agar})

# For internal header definitions.
C_DEFINE(_ES_INTERNAL)

# Import standard routines provided by Agar (without "AG"_ prefix).
C_DEFINE(_USE_AGAR_STD)
C_DEFINE(_USE_AGAR_CORE)
C_DEFINE(_USE_AGAR_QUEUE)
C_DEFINE(_USE_AGAR_GUI)
C_DEFINE(_USE_AGAR_TYPES)

# Import standard math functions (e.g., Sin()) provided by the
# Agar-MATH library (without the "M_" prefix).
C_DEFINE(_USE_AGAR_MATH)

# We use #include <edacious/foo> throughout the code.
C_INCDIR($SRC)

# Disable improper warnings.
C_NO_SECURE_WARNINGS();
#C_EXTRA_WARNINGS();
#C_FATAL_WARNINGS();

# Enable threads support if POSIX threads are available.
# XXX TODO: Check for threads support in installed Agar!
if [ "${enable_threads}" != "no" ]; then
	CHECK(pthreads, 0, ${prefix_pthreads})
	if [ "${HAVE_PTHREADS}" = "yes" ];
	then
		if [ "${HAVE_PTHREADS_XOPEN}" = "no" ]; then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "no" ]; then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "no" ]; then
			if [ "${enable_threads}" = "yes" ]; then
				echo "*"
				echo "* --enable-threads was given, but your"
				echo "* pthreads library lacks support for"
				echo "* recursive mutexes. Try running the"
				echo "* configure script again without this"
				echo "* option."
				echo "*"
				exit 1
			fi
		fi
		fi
		fi
		HDEFINE(THREADS, 1)
	else
		if [ "${enable_threads}" = "yes" ]; then
			echo "*"
			echo "* --enable-threads was given, but no pthreads"
			echo "* library was found on your system. Try running"
			echo "* the configure script again without this option."
			echo "*"
			exit 1
		fi
	fi
else
	HUNDEF(THREADS)
	HUNDEF(HAVE_PTHREADS)
	HUNDEF(HAVE_PTHREADS_XOPEN)
	MDEFINE(PTHREADS_CFLAGS, "")
	MDEFINE(PTHREADS_LIBS, "")
	MDEFINE(PTHREADS_XOPEN_CFLAGS, "")
	MDEFINE(PTHREADS_XOPEN_LIBS, "")
	#
	# Lock macros expand to no-ops when compiled !THREADS, which may
	# result in unused variables in some places.
	#
	if [ "${enable_warnings}" = "yes" ]; then
		C_OPTION(-Wno-unused)
	fi
fi

# Apply the compilation options.
if [ "${enable_warnings}" != "no" ]; then
	C_OPTION(-Wall)
	C_OPTION(-Werror)
	C_OPTION(-Wmissing-prototypes)
fi
if [ "${enable_debug}" = "yes" ]; then
	C_DEFINE(ES_DEBUG)
	HDEFINE(ES_DEBUG, "yes")
	LD_OPTION(-g)
else
	HUNDEF(ES_DEBUG)
fi
if [ "${enable_fpdebug}" = "yes" ]; then
	C_DEFINE(FP_DEBUG)
	HDEFINE(FP_DEBUG, "yes")
else
	HUNDEF(FP_DEBUG)
fi
if [ "${enable_exprdebug}" = "yes" ]; then
	C_DEFINE(EXPR_DEBUG)
	HDEFINE(EXPR_DEBUG, "yes")
else
	HUNDEF(EXPR_DEBUG)
fi

# Generate includes into ./include/edacious/.
C_INCPREP(include,edacious)

# We use both <foo.h> and <edacious/foo.h> in the sources.
C_INCDIR($BLD/include)
C_INCDIR($BLD/include/edacious)
C_INCDIR_CONFIG($BLD/include/edacious/config)

# Generate the "edacious-config" script.
CONFIG_SCRIPT(edacious-config, "-I${INCLDIR} ${GETTEXT_CFLAGS}", "-L${LIBDIR} -les_core ${GETTEXT_LIBS}")

echo "*"
echo "* Configuration successful."
echo "* Use \"make depend\" if you plan on editing the source code."
echo "* Use \"make\" and \"make install\" to build and install Edacious."
echo "*"
