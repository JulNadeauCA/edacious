# Public domain

PACKAGE("Edacious")
VERSION("1.0")
RELEASE("Edacious, Sepulchral and Frog-Like")

REGISTER_SECTION("Edacious specific options:")
REGISTER("--enable-debug",		"General debugging [default: no]")
REGISTER("--enable-fpdebug",		"Debug FP exceptions [default: no]")
REGISTER("--enable-exprdebug",		"Debug expression parsing [default: no]")
REGISTER("--enable-warnings",		"Enable compiler warnings [default: no]")
REGISTER("--enable-edition",		"Enable graphical editor [default: yes]")
REGISTER("--with-agar[=PREFIX]", 	"Specify Agar location [default: auto]")

HDEFINE(EDACIOUS_VERSION, "$VERSION")

DEFAULT_DIR(DATADIR, "${PREFIX}/share/edacious")
DEFAULT_DIR(MODULEDIR, "${LIBDIR}/edacious")
DEFAULT_DIR(INCLDIR, "${PREFIX}/include/edacious")

REQUIRE(cc)
CHECK(sys_types)
CHECK(getopt)
CHECK(getpwuid)
CHECK(getuid)

# Require Agar
REQUIRE(agar, 1.5.0, ${prefix_agar})
REQUIRE(agar-vg, 1.5.0, ${prefix_agar})
REQUIRE(agar-dev, 1.5.0, ${prefix_agar})
REQUIRE(agar-math, 1.5.0, ${prefix_agar})

# For internal header definitions.
C_DEFINE(_ES_INTERNAL)

# Import standard routines provided by Agar (without "AG"_ prefix).
C_DEFINE(_USE_AGAR_STD)
C_DEFINE(_USE_AGAR_CORE)
C_DEFINE(_USE_AGAR_QUEUE)
C_DEFINE(_USE_AGAR_GUI)
C_DEFINE(_USE_AGAR_TYPES)

# Import standard math functions (e.g., Sin()) provided by the
# Agar-MATH library (without the "M_" prefix).
C_DEFINE(_USE_AGAR_MATH)

# We use #include <edacious/foo> throughout the code.
C_INCDIR($SRC)

# Disable improper warnings.
C_NO_SECURE_WARNINGS()
#C_EXTRA_WARNINGS()
#C_FATAL_WARNINGS()

# Apply the compilation options.
if [ "${enable_warnings}" != "no" ]; then
	C_OPTION(-Wall)
	C_OPTION(-Werror)
	C_OPTION(-Wmissing-prototypes)
fi
if [ "${enable_debug}" = "yes" ]; then
	C_DEFINE(ES_DEBUG)
	HDEFINE(ES_DEBUG, "yes")
	MDEFINE(CFLAGS, "${CFLAGS} -g")
else
	HUNDEF(ES_DEBUG)
fi
if [ "${enable_fpdebug}" = "yes" ]; then
	C_DEFINE(FP_DEBUG)
	HDEFINE(FP_DEBUG, "yes")
else
	HUNDEF(FP_DEBUG)
fi
if [ "${enable_exprdebug}" = "yes" ]; then
	C_DEFINE(EXPR_DEBUG)
	HDEFINE(EXPR_DEBUG, "yes")
else
	HUNDEF(EXPR_DEBUG)
fi

# Enable NLS if requested explicitely.
if [ "${enable_nls}" = "yes" ]; then
	CHECK(gettext, 0, ${prefix_gettext})
	if [ "${HAVE_GETTEXT}" != "yes" ]; then
		echo "*"
		echo "* --enable-nls was given but gettext was not found."
		echo "*"
		exit 1
	fi
else
	HUNDEF(HAVE_GETTEXT, GETTEXT_CFLAGS, GETTEXT_LIBS)
fi

# Set up configure script output.
C_INCPREP($BLD/include/edacious)
C_INCDIR($BLD/include)
C_INCDIR($BLD/include/edacious)
C_INCDIR_CONFIG($BLD/include/edacious/config)

# Generate the "edacious-config" script.
CONFIG_SCRIPT(edacious-config, "-I${INCLDIR} ${GETTEXT_CFLAGS}", \
	"-L${LIBDIR} -les_core ${GETTEXT_LIBS}")

