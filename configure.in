# Public domain

REGISTER("--enable-debug",	"General debugging [default: no]")
REGISTER("--enable-fpdebug",	"Debug FP exceptions [default: no]")
REGISTER("--enable-exprdebug",	"Debug expression parsing [default: no]")
REGISTER("--enable-warnings",	"Enable compiler warnings [default: no]")
REGISTER("--enable-edition",	"Enable graphical editor [default: yes]")
REGISTER("--enable-threads",	"Thread safety [default: check]")

HDEFINE(VERSION, "1.0-beta")
HDEFINE(EDACIOUS_VERSION, "$VERSION")
HDEFINE(RELEASE, "UnrealSacrificeNightmare")

MDEFINE(SHAREDIR, "$PREFIX/share/edacious")
HDEFINE(SHAREDIR, "$PREFIX/share/edacious")
MDEFINE(LIBDIR, "$PREFIX/lib")
HDEFINE(LIBDIR, "$PREFIX/lib")
MDEFINE(MODULEDIR, "$PREFIX/lib/edacious")
HDEFINE(MODULEDIR, "$PREFIX/lib/edacious")
MDEFINE(INCLDIR, "$PREFIX/include/edacious")
HDEFINE(INCLDIR, "$PREFIX/include/edacious")

CHECK(cc)
CHECK(sys_types)
CHECK(getopt)
CHECK(getpwuid)
CHECK(getuid)

CHECK(agar, 1.3.4)
CHECK(agar-vg, 1.3.4)
CHECK(agar-dev, 1.3.4)
CHECK(agar-math, 1.3.4)

# For internal header definitions.
C_DEFINE(_ES_INTERNAL)

# Import standard routines provided by Agar (without "AG"_ prefix).
C_DEFINE(_USE_AGAR_STD)
C_DEFINE(_USE_AGAR_CORE)
C_DEFINE(_USE_AGAR_QUEUE)
C_DEFINE(_USE_AGAR_GUI)
C_DEFINE(_USE_AGAR_TYPES)

# Import standard math functions (e.g., Sin()) provided by the
# Agar-MATH library (without the "M_" prefix).
C_DEFINE(_USE_AGAR_MATH)

# We use #include <edacious/foo> throughout the code.
C_INCDIR($SRC)

# Disable improper warnings.
C_NO_SECURE_WARNINGS();
#C_EXTRA_WARNINGS();
#C_FATAL_WARNINGS();

# Enable threads support if POSIX threads are available.
# XXX TODO: Check for threads support in installed Agar!
if [ "${enable_threads}" != "no" ]; then
	CHECK(pthreads)
	if [ "${HAVE_PTHREADS}" = "yes" ];
	then
		if [ "${HAVE_PTHREADS_XOPEN}" = "no" ]; then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "no" ]; then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "no" ]; then
			if [ "${enable_threads}" = "yes" ]; then
				echo "*"
				echo "* --enable-threads was given, but your"
				echo "* pthreads library lacks support for"
				echo "* recursive mutexes. Try running the"
				echo "* configure script again without this"
				echo "* option."
				echo "*"
				exit 1
			fi
		fi
		fi
		fi
		HDEFINE(THREADS, 1)
	else
		if [ "${enable_threads}" = "yes" ]; then
			echo "*"
			echo "* --enable-threads was given, but no pthreads"
			echo "* library was found on your system. Try running"
			echo "* the configure script again without this option."
			echo "*"
			exit 1
		fi
	fi
else
	HUNDEF(THREADS)
	HUNDEF(HAVE_PTHREADS)
	HUNDEF(HAVE_PTHREADS_XOPEN)
	MDEFINE(PTHREADS_CFLAGS, "")
	MDEFINE(PTHREADS_LIBS, "")
	MDEFINE(PTHREADS_XOPEN_CFLAGS, "")
	MDEFINE(PTHREADS_XOPEN_LIBS, "")
	#
	# Lock macros expand to no-ops when compiled !THREADS, which may
	# result in unused variables in some places.
	#
	if [ "${enable_warnings}" = "yes" ]; then
		C_OPTION(-Wno-unused)
	fi
fi

# Require Agar, VG and Math libraries.
if [ "${HAVE_AGAR}" != "yes" ]; then
	echo "This application requires the Agar library"
	echo "(http://libagar.org/)"
	exit 1
fi
if [ "${HAVE_AGAR_VG}" != "yes" ]; then
	echo "This application requires the Agar-VG library"
	echo "(http://libagar.org/)"
	exit 1
fi
if [ "${HAVE_AGAR_MATH}" != "yes" ]; then
	echo "This application requires the Agar-Math library"
	echo "(http://libagar.org/)"
	exit 1
fi

# Apply the compilation options.
if [ "${enable_warnings}" != "no" ]; then
	C_OPTION(-Wall)
	C_OPTION(-Werror)
	C_OPTION(-Wmissing-prototypes)
fi
if [ "${enable_debug}" = "yes" ]; then
	C_DEFINE(ES_DEBUG)
	HDEFINE(ES_DEBUG, "yes")
	LD_OPTION(-g)
else
	HUNDEF(ES_DEBUG)
fi
if [ "${enable_fpdebug}" = "yes" ]; then
	C_DEFINE(FP_DEBUG)
	HDEFINE(FP_DEBUG, "yes")
else
	HUNDEF(FP_DEBUG)
fi
if [ "${enable_exprdebug}" = "yes" ]; then
	C_DEFINE(EXPR_DEBUG)
	HDEFINE(EXPR_DEBUG, "yes")
else
	HUNDEF(EXPR_DEBUG)
fi

# To avoid obstructing user code, we always use includes of the
# form <edacious/foo/foo.h>.
if [ "${with_proj_generation}" != "yes" ]; then
	if [ ! -e "$SRC/edacious" ]; then (cd $SRC && ln -s . edacious); fi
	if [ ! -e "edacious" ]; then ln -s . edacious; fi
fi
