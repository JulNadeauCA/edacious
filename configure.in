# Public domain

REGISTER("--enable-static",	"Produce a static binary [default: no]")
REGISTER("--enable-warnings",	"Enable compiler warnings [default: no]")
REGISTER("--enable-edition",	"Enable graphical editor [default: yes]")
REGISTER("--enable-threads",	"Thread safety [default: check]")
REGISTER("--enable-fpdebug",	"Catch floating point exceptions [default: no]")

HDEFINE(VERSION, "04052008")
HDEFINE(RELEASE, "")

MDEFINE(SHAREDIR, "$PREFIX/share/agar-eda")
HDEFINE(SHAREDIR, "$PREFIX/share/agar-eda")
MDEFINE(TTFDIR, "$PREFIX/share/agar-eda/fonts")
HDEFINE(TTFDIR, "$PREFIX/share/agar-eda/fonts")
MDEFINE(LIBDIR, "$PREFIX/lib/agar-eda")
HDEFINE(LIBDIR, "$PREFIX/lib/agar-eda")
MDEFINE(INCLDIR, "$PREFIX/include/agar-eda")
HDEFINE(INCLDIR, "$PREFIX/include/agar-eda")

CHECK(cc)
CHECK(agar, 1.0)
CHECK(agar-vg, 1.0)
CHECK(agar-dev, 1.0)
CHECK(freesg, 1.0)
CHECK(getopt)

C_DEFINE(_ES_INTERNAL)
C_DEFINE(_USE_AGAR_STD)
C_DEFINE(_USE_AGAR_CORE)
C_DEFINE(_USE_AGAR_QUEUE)
C_DEFINE(_USE_AGAR_GUI)
C_DEFINE(_USE_SG_MATH)

C_INCDIR($SRC)

C_NO_SECURE_WARNINGS();
#C_EXTRA_WARNINGS();
#C_FATAL_WARNINGS();

# Enable threads support if POSIX threads are available.
# XXX TODO: Check for threads support in installed Agar!
if [ "${enable_threads}" != "no" ]; then
	CHECK(pthreads)
	if [ "${HAVE_PTHREADS}" = "yes" ];
	then
		if [ "${HAVE_PTHREADS_XOPEN}" = "no" ]; then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "no" ]; then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "no" ]; then
			if [ "${enable_threads}" = "yes" ]; then
				echo "*"
				echo "* --enable-threads was given, but your"
				echo "* pthreads library lacks support for"
				echo "* recursive mutexes. Try running the"
				echo "* configure script again without this"
				echo "* option."
				echo "*"
				exit 1
			fi
		fi
		fi
		fi
		HDEFINE(THREADS, 1)
	else
		if [ "${enable_threads}" = "yes" ]; then
			echo "*"
			echo "* --enable-threads was given, but no pthreads"
			echo "* library was found on your system. Try running"
			echo "* the configure script again without this option."
			echo "*"
			exit 1
		fi
	fi
else
	HUNDEF(THREADS)
	HUNDEF(HAVE_PTHREADS)
	HUNDEF(HAVE_PTHREADS_XOPEN)
	MDEFINE(PTHREADS_CFLAGS, "")
	MDEFINE(PTHREADS_LIBS, "")
	MDEFINE(PTHREADS_XOPEN_CFLAGS, "")
	MDEFINE(PTHREADS_XOPEN_LIBS, "")
	#
	# Lock macros expand to no-ops when compiled !THREADS, which may
	# result in unused variables in some places.
	#
	if [ "${enable_warnings}" = "yes" ]; then
		C_OPTION(-Wno-unused)
	fi
fi

if [ "${HAVE_AGAR}" != "yes" ]; then
	echo "This application requires Agar"
	echo "(http://libagar.org/)"
	exit 1
fi
if [ "${HAVE_AGAR_VG}" != "yes" ]; then
	echo "This application requires Agar-VG"
	echo "(http://hypertriton.com/agar-vg)"
	exit 1
fi
if [ "${HAVE_FREESG}" != "yes" ]; then
	echo "This application requires the FreeSG math library"
	echo "(http://freesg.org/)"
	exit 1
fi

if [ "${enable_warnings}" != "no" ]; then
	MDEFINE(CFLAGS, "$CFLAGS -Wall -Werror -Wmissing-prototypes")
	MDEFINE(CFLAGS, "$CFLAGS -Wno-unused")
fi
if [ "${enable_static}" = "yes" ]; then
	MDEFINE(LDFLAGS, "-static")
fi
if [ "${enable_debug}" = "yes" ]; then
	MDEFINE(CFLAGS, "$CFLAGS -DDEBUG")
fi
if [ "${enable_fpdebug}" = "yes" ]; then
	MDEFINE(CFLAGS, "$CFLAGS -DFP_DEBUG")
fi
